// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap_tickers, calculate_result, current_source, form_disabled, is_redrawing, load_rate, rate_handlers, rates, redraw_result, refresh_rate, selected_currency, timeouts_count, update_currency_list,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  rates = {
    mtgox: {},
    bitstamp: {},
    btce: {}
  };

  timeouts_count = 0;

  refresh_rate = 1000;

  rate_handlers = {
    mtgox: function(data) {
      var dr;
      dr = parseFloat(data['rate']);
      return isNaN(dr) || dr;
    },
    bitstamp: function(data) {
      var hi, lo;
      hi = parseFloat(data['high']);
      lo = parseFloat(data['low']);
      return isNaN(hi) || isNaN(lo) || ((hi + lo) / 2);
    },
    btce: function(data) {
      return data['rate'];
    }
  };

  current_source = function() {
    return $('input.source_chooser:checked');
  };

  selected_currency = function() {
    return $('#currency_chooser:visible').val() || 'USD';
  };

  load_rate = function(source, currency) {
    var source_name, url, url_mask;
    source_name = source.val();
    url_mask = source.data('source-uri-mask');
    url = url_mask.replace('%s', currency);
    return $.ajax(url, {
      success: function(data) {
        var res;
        res = rate_handlers[source_name](data);
        if (res) {
          return rates[source_name][currency] = res;
        }
      }
    });
  };

  update_currency_list = function() {
    var active_currencies, opts;
    active_currencies = current_source().data('currency-filter');
    switch (active_currencies.split(' ').length) {
      case 0:
        return console.error("WTF?");
      case 1:
        $('#currency_chooser').val(active_currencies).hide();
        return $('#single_currency_label').text(active_currencies).show();
      default:
        opts = $('#currency_chooser option').each(function(i, el) {
          if (active_currencies.indexOf($(this).val()) !== -1) {
            return $(this).show();
          } else {
            return $(this).hide();
          }
        });
        if (opts.filter(function() {
          return $(this).css('display') === 'none';
        }).length > 0) {
          opts.filter(function() {
            return $(this).css('display') !== 'none';
          }).first().prop('selected', true);
        }
        $('#single_currency_label').hide();
        return $('#currency_chooser').show();
    }
  };

  calculate_result = function() {
    var amount;
    amount = parseFloat($('#btc_count').val());
    if (amount != null) {
      return Math.round(amount * rates[current_source().val()][selected_currency()] * 100) / 100;
    }
  };

  is_redrawing = false;

  redraw_result = function() {
    if (!is_redrawing) {
      is_redrawing = true;
      $('#result').val(calculate_result());
      return is_redrawing = false;
    }
  };

  form_disabled = function(how) {
    if (how == null) {
      how = true;
    }
    return $('#main_form').find('input, select').prop('disabled', !!how);
  };

  bootstrap_tickers = function() {
    return $('input.source_chooser').map(function() {
      return {
        currencies: $(this).data('currency-filter'),
        src: $(this)
      };
    }).each(function(i, el) {
      return jQuery.each(el['currencies'].split(' '), function(k, v) {
        return load_rate(el['src'], v);
      });
    });
  };

  $(function() {
    var timeout_handler;
    form_disabled();
    bootstrap_tickers();
    form_disabled(false);
    $('#btc_count').on('keypress', function(evt) {
      var code;
      code = evt.which;
      if (!((__indexOf.call([48, 49, 50, 51, 52, 53, 54, 55, 56, 57], code) >= 0) || code === 46)) {
        evt.preventDefault();
        return false;
      } else {
        redraw_result();
        return true;
      }
    });
    $('input.source_chooser').on('change', function(evt) {
      update_currency_list();
      return redraw_result();
    });
    $('#currency_chooser').on('change', function() {
      return redraw_result();
    });
    timeout_handler = function() {
      load_rate(current_source(), selected_currency());
      redraw_result();
      return setTimeout(timeout_handler, refresh_rate);
    };
    setTimeout(timeout_handler, refresh_rate);
    return update_currency_list();
  });

}).call(this);
